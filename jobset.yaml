apiVersion: jobset.x-k8s.io/v1alpha2
kind: JobSet
metadata:
  name: single-slice-job  # JobSet name (<jobSetName>)
  #namespace: serving-workloads
  annotations:
    alpha.jobset.sigs.k8s.io/exclusive-topology: cloud.google.com/gke-nodepool # 1:1 job replica to node pool assignment
spec:
  failurePolicy:
    maxRestarts: 4  # The set will be restarted on failures up to 4 times.
  replicatedJobs:
  - name: slice    # Part of the name of the child Jobs (<replicateJobName>)
    replicas: 2    # Number of slices
    template:
      spec:
        backoffLimit: 0   # Must be set to 0. Fail the job when any pod fails.
        template:
          metadata:
            #  namespace: serving-workloads
            annotations:
              gke-gcsfuse/volumes: "true"
          spec:
            # dnsPolicy: ClusterFirstWithHostNet
            # nodeSelector:
            # cloud.google.com/gke-tpu-accelerator: tpu-v6e-slice
            # cloud.google.com/gke-tpu-topology: 4x4
            containers:
            - name: pytorch-tpu
              image: ubuntu:22.04
              ports:
              - containerPort: 8471
              securityContext:
                privileged: true
              volumeMounts:
              - name: gcs-fuse-csi-ephemeral
                mountPath: /data
              command:
              - bash
              - -c
              - |
                export PJRT_DEVICE=TPU
                export XLA_USE_BF16=1
                export XLA_IR_DEBUG=1
                export XLA_HLO_DEBUG=1
                
                export PROFILE_EPOCH=0
                export PROFILE_STEP=3
                export PROFILE_DURATION_MS=20000
                export PROFILE_LOGDIR=/tmp/home/
                
                # python3 test.py
                sleep infinity
              resources:
                limits:
                  cpu: 1
                  # google.com/tpu: 4 # Number of TPU chips per worker
#            initContainers:
            # Metadata Prefetch native sidecar.
#            - name: metadata-prefetch-container
#              image: ubuntu:22.04
#              restartPolicy: Always
#              command:
#              - "/bin/bash"
#              - "-c"
#              - |
#                echo "Starting ls on the bucket..."
#                # Redirect output to /dev/null to prevent storage of output.
#                ls -R /data > /dev/null && \
#                echo "Metadata prefetch complete. Going to sleep..." && \
#                tail -f /dev/null
#              resources:
#                requests:
#                  cpu: 250m
#                  memory: 256Mi
#              securityContext:
#                allowPrivilegeEscalation: false
#                capabilities:
#                  drop:
#                  - ALL
#                readOnlyRootFilesystem: true
#                runAsGroup: 65534
#                runAsNonRoot: true
#                runAsUser: 65534
#                seccompProfile:
#                  type: RuntimeDefault
#              volumeMounts:
#              - mountPath: /data
#                # Point volume mount to the desired volume.
#                name: gcs-fuse-csi-ephemeral
            serviceAccountName: princer-ssiog-ksa-e2892743606541ae
            volumes:
            - name: gcs-fuse-csi-ephemeral
              csi:
                driver: gcsfuse.csi.storage.gke.io
                volumeAttributes:
                  bucketName:  "princer-ssiog-metrics-bkt"
                  mountOptions: "implicit-dirs,file-system:kernel-list-cache-ttl-secs:-1"
                  metadataStatCacheCapacity: "-1"
                  metadataTypeCacheCapacity: "-1"
                  metadataCacheTtlSeconds: "-1"
                  gcsfuseLoggingSeverity: debug